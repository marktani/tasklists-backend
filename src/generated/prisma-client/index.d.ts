// Code generated by Prisma (prisma@1.19.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  categoryField: (where?: CategoryFieldWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  customField: (where?: CustomFieldWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => Asset;
  assets: (
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AssetNode>;
  assetsConnection: (
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AssetConnection;
  category: (where: CategoryWhereUniqueInput) => Category;
  categories: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CategoryNode>;
  categoriesConnection: (
    args?: {
      where?: CategoryWhereInput;
      orderBy?: CategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryConnection;
  categoryField: (where: CategoryFieldWhereUniqueInput) => CategoryField;
  categoryFields: (
    args?: {
      where?: CategoryFieldWhereInput;
      orderBy?: CategoryFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CategoryFieldNode>;
  categoryFieldsConnection: (
    args?: {
      where?: CategoryFieldWhereInput;
      orderBy?: CategoryFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CategoryFieldConnection;
  comment: (where: CommentWhereUniqueInput) => Comment;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CommentNode>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnection;
  customField: (where: CustomFieldWhereUniqueInput) => CustomField;
  customFields: (
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CustomFieldNode>;
  customFieldsConnection: (
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CustomFieldConnection;
  task: (where: TaskWhereUniqueInput) => Task;
  tasks: (
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TaskNode>;
  tasksConnection: (
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TaskConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => Asset;
  updateAsset: (
    args: { data: AssetUpdateInput; where: AssetWhereUniqueInput }
  ) => Asset;
  updateManyAssets: (
    args: { data: AssetUpdateInput; where?: AssetWhereInput }
  ) => BatchPayload;
  upsertAsset: (
    args: {
      where: AssetWhereUniqueInput;
      create: AssetCreateInput;
      update: AssetUpdateInput;
    }
  ) => Asset;
  deleteAsset: (where: AssetWhereUniqueInput) => Asset;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayload;
  createCategory: (data: CategoryCreateInput) => Category;
  updateCategory: (
    args: { data: CategoryUpdateInput; where: CategoryWhereUniqueInput }
  ) => Category;
  updateManyCategories: (
    args: { data: CategoryUpdateInput; where?: CategoryWhereInput }
  ) => BatchPayload;
  upsertCategory: (
    args: {
      where: CategoryWhereUniqueInput;
      create: CategoryCreateInput;
      update: CategoryUpdateInput;
    }
  ) => Category;
  deleteCategory: (where: CategoryWhereUniqueInput) => Category;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayload;
  createCategoryField: (data: CategoryFieldCreateInput) => CategoryField;
  updateCategoryField: (
    args: {
      data: CategoryFieldUpdateInput;
      where: CategoryFieldWhereUniqueInput;
    }
  ) => CategoryField;
  updateManyCategoryFields: (
    args: { data: CategoryFieldUpdateInput; where?: CategoryFieldWhereInput }
  ) => BatchPayload;
  upsertCategoryField: (
    args: {
      where: CategoryFieldWhereUniqueInput;
      create: CategoryFieldCreateInput;
      update: CategoryFieldUpdateInput;
    }
  ) => CategoryField;
  deleteCategoryField: (where: CategoryFieldWhereUniqueInput) => CategoryField;
  deleteManyCategoryFields: (where?: CategoryFieldWhereInput) => BatchPayload;
  createComment: (data: CommentCreateInput) => Comment;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => Comment;
  updateManyComments: (
    args: { data: CommentUpdateInput; where?: CommentWhereInput }
  ) => BatchPayload;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => Comment;
  deleteComment: (where: CommentWhereUniqueInput) => Comment;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayload;
  createCustomField: (data: CustomFieldCreateInput) => CustomField;
  updateCustomField: (
    args: { data: CustomFieldUpdateInput; where: CustomFieldWhereUniqueInput }
  ) => CustomField;
  updateManyCustomFields: (
    args: { data: CustomFieldUpdateInput; where?: CustomFieldWhereInput }
  ) => BatchPayload;
  upsertCustomField: (
    args: {
      where: CustomFieldWhereUniqueInput;
      create: CustomFieldCreateInput;
      update: CustomFieldUpdateInput;
    }
  ) => CustomField;
  deleteCustomField: (where: CustomFieldWhereUniqueInput) => CustomField;
  deleteManyCustomFields: (where?: CustomFieldWhereInput) => BatchPayload;
  createTask: (data: TaskCreateInput) => Task;
  updateTask: (
    args: { data: TaskUpdateInput; where: TaskWhereUniqueInput }
  ) => Task;
  updateManyTasks: (
    args: { data: TaskUpdateInput; where?: TaskWhereInput }
  ) => BatchPayload;
  upsertTask: (
    args: {
      where: TaskWhereUniqueInput;
      create: TaskCreateInput;
      update: TaskUpdateInput;
    }
  ) => Task;
  deleteTask: (where: TaskWhereUniqueInput) => Task;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  categoryField: (
    where?: CategoryFieldSubscriptionWhereInput
  ) => CategoryFieldSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  customField: (
    where?: CustomFieldSubscriptionWhereInput
  ) => CustomFieldSubscriptionPayloadSubscription;
  task: (
    where?: TaskSubscriptionWhereInput
  ) => TaskSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "SUPERADMIN" | "ADMIN" | "STAFF";

export type UserStatus = "JOINED" | "INVITED" | "DELETED";

export type FieldType = "STRING" | "INT" | "DATE" | "ASSET";

export type TaskStatus =
  | "CREATED"
  | "ASSIGNED"
  | "AWAITINGINPUT"
  | "COMPLETED"
  | "CLOSED";

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "dueDate_ASC"
  | "dueDate_DESC"
  | "dueWhenPossible_ASC"
  | "dueWhenPossible_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC"
  | "slug_ASC"
  | "slug_DESC";

export type AssetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "assetUrl_ASC"
  | "assetUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fieldName_ASC"
  | "fieldName_DESC"
  | "fieldType_ASC"
  | "fieldType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CustomFieldOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fieldName_ASC"
  | "fieldName_DESC"
  | "fieldType_ASC"
  | "fieldType_DESC"
  | "fieldValue_ASC"
  | "fieldValue_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "slackHandle_ASC"
  | "slackHandle_DESC"
  | "role_ASC"
  | "role_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "signupToken_ASC"
  | "signupToken_DESC"
  | "signupTokenExpiry_ASC"
  | "signupTokenExpiry_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AssetWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface TaskWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdBy?: UserWhereInput;
  assignedTo?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  assets_every?: AssetWhereInput;
  assets_some?: AssetWhereInput;
  assets_none?: AssetWhereInput;
  category?: CategoryWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  dueDate?: DateTimeInput;
  dueDate_not?: DateTimeInput;
  dueDate_in?: DateTimeInput[] | DateTimeInput;
  dueDate_not_in?: DateTimeInput[] | DateTimeInput;
  dueDate_lt?: DateTimeInput;
  dueDate_lte?: DateTimeInput;
  dueDate_gt?: DateTimeInput;
  dueDate_gte?: DateTimeInput;
  dueWhenPossible?: Boolean;
  dueWhenPossible_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  customFields_every?: CustomFieldWhereInput;
  customFields_some?: CustomFieldWhereInput;
  customFields_none?: CustomFieldWhereInput;
  status?: TaskStatus;
  status_not?: TaskStatus;
  status_in?: TaskStatus[] | TaskStatus;
  status_not_in?: TaskStatus[] | TaskStatus;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  AND?: TaskWhereInput[] | TaskWhereInput;
  OR?: TaskWhereInput[] | TaskWhereInput;
  NOT?: TaskWhereInput[] | TaskWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  avatar?: String;
  avatar_not?: String;
  avatar_in?: String[] | String;
  avatar_not_in?: String[] | String;
  avatar_lt?: String;
  avatar_lte?: String;
  avatar_gt?: String;
  avatar_gte?: String;
  avatar_contains?: String;
  avatar_not_contains?: String;
  avatar_starts_with?: String;
  avatar_not_starts_with?: String;
  avatar_ends_with?: String;
  avatar_not_ends_with?: String;
  slackHandle?: String;
  slackHandle_not?: String;
  slackHandle_in?: String[] | String;
  slackHandle_not_in?: String[] | String;
  slackHandle_lt?: String;
  slackHandle_lte?: String;
  slackHandle_gt?: String;
  slackHandle_gte?: String;
  slackHandle_contains?: String;
  slackHandle_not_contains?: String;
  slackHandle_starts_with?: String;
  slackHandle_not_starts_with?: String;
  slackHandle_ends_with?: String;
  slackHandle_not_ends_with?: String;
  tasksCreated_every?: TaskWhereInput;
  tasksCreated_some?: TaskWhereInput;
  tasksCreated_none?: TaskWhereInput;
  tasksAssignedTo_every?: TaskWhereInput;
  tasksAssignedTo_some?: TaskWhereInput;
  tasksAssignedTo_none?: TaskWhereInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: Float;
  resetTokenExpiry_not?: Float;
  resetTokenExpiry_in?: Float[] | Float;
  resetTokenExpiry_not_in?: Float[] | Float;
  resetTokenExpiry_lt?: Float;
  resetTokenExpiry_lte?: Float;
  resetTokenExpiry_gt?: Float;
  resetTokenExpiry_gte?: Float;
  signupToken?: String;
  signupToken_not?: String;
  signupToken_in?: String[] | String;
  signupToken_not_in?: String[] | String;
  signupToken_lt?: String;
  signupToken_lte?: String;
  signupToken_gt?: String;
  signupToken_gte?: String;
  signupToken_contains?: String;
  signupToken_not_contains?: String;
  signupToken_starts_with?: String;
  signupToken_not_starts_with?: String;
  signupToken_ends_with?: String;
  signupToken_not_ends_with?: String;
  signupTokenExpiry?: Float;
  signupTokenExpiry_not?: Float;
  signupTokenExpiry_in?: Float[] | Float;
  signupTokenExpiry_not_in?: Float[] | Float;
  signupTokenExpiry_lt?: Float;
  signupTokenExpiry_lte?: Float;
  signupTokenExpiry_gt?: Float;
  signupTokenExpiry_gte?: Float;
  status?: UserStatus;
  status_not?: UserStatus;
  status_in?: UserStatus[] | UserStatus;
  status_not_in?: UserStatus[] | UserStatus;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface AssetWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdBy?: UserWhereInput;
  assetUrl?: String;
  assetUrl_not?: String;
  assetUrl_in?: String[] | String;
  assetUrl_not_in?: String[] | String;
  assetUrl_lt?: String;
  assetUrl_lte?: String;
  assetUrl_gt?: String;
  assetUrl_gte?: String;
  assetUrl_contains?: String;
  assetUrl_not_contains?: String;
  assetUrl_starts_with?: String;
  assetUrl_not_starts_with?: String;
  assetUrl_ends_with?: String;
  assetUrl_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: AssetWhereInput[] | AssetWhereInput;
  OR?: AssetWhereInput[] | AssetWhereInput;
  NOT?: AssetWhereInput[] | AssetWhereInput;
}

export interface CategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  categoryFields_every?: CategoryFieldWhereInput;
  categoryFields_some?: CategoryFieldWhereInput;
  categoryFields_none?: CategoryFieldWhereInput;
  tasks_every?: TaskWhereInput;
  tasks_some?: TaskWhereInput;
  tasks_none?: TaskWhereInput;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  AND?: CategoryWhereInput[] | CategoryWhereInput;
  OR?: CategoryWhereInput[] | CategoryWhereInput;
  NOT?: CategoryWhereInput[] | CategoryWhereInput;
}

export interface CategoryFieldWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fieldName?: String;
  fieldName_not?: String;
  fieldName_in?: String[] | String;
  fieldName_not_in?: String[] | String;
  fieldName_lt?: String;
  fieldName_lte?: String;
  fieldName_gt?: String;
  fieldName_gte?: String;
  fieldName_contains?: String;
  fieldName_not_contains?: String;
  fieldName_starts_with?: String;
  fieldName_not_starts_with?: String;
  fieldName_ends_with?: String;
  fieldName_not_ends_with?: String;
  fieldType?: FieldType;
  fieldType_not?: FieldType;
  fieldType_in?: FieldType[] | FieldType;
  fieldType_not_in?: FieldType[] | FieldType;
  category?: CategoryWhereInput;
  AND?: CategoryFieldWhereInput[] | CategoryFieldWhereInput;
  OR?: CategoryFieldWhereInput[] | CategoryFieldWhereInput;
  NOT?: CategoryFieldWhereInput[] | CategoryFieldWhereInput;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  user?: UserWhereInput;
  assets_every?: AssetWhereInput;
  assets_some?: AssetWhereInput;
  assets_none?: AssetWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface CustomFieldWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fieldName?: String;
  fieldName_not?: String;
  fieldName_in?: String[] | String;
  fieldName_not_in?: String[] | String;
  fieldName_lt?: String;
  fieldName_lte?: String;
  fieldName_gt?: String;
  fieldName_gte?: String;
  fieldName_contains?: String;
  fieldName_not_contains?: String;
  fieldName_starts_with?: String;
  fieldName_not_starts_with?: String;
  fieldName_ends_with?: String;
  fieldName_not_ends_with?: String;
  fieldType?: FieldType;
  fieldType_not?: FieldType;
  fieldType_in?: FieldType[] | FieldType;
  fieldType_not_in?: FieldType[] | FieldType;
  fieldValue?: String;
  fieldValue_not?: String;
  fieldValue_in?: String[] | String;
  fieldValue_not_in?: String[] | String;
  fieldValue_lt?: String;
  fieldValue_lte?: String;
  fieldValue_gt?: String;
  fieldValue_gte?: String;
  fieldValue_contains?: String;
  fieldValue_not_contains?: String;
  fieldValue_starts_with?: String;
  fieldValue_not_starts_with?: String;
  fieldValue_ends_with?: String;
  fieldValue_not_ends_with?: String;
  categoryField?: CategoryFieldWhereInput;
  AND?: CustomFieldWhereInput[] | CustomFieldWhereInput;
  OR?: CustomFieldWhereInput[] | CustomFieldWhereInput;
  NOT?: CustomFieldWhereInput[] | CustomFieldWhereInput;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export type CategoryFieldWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CustomFieldWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TaskWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  resetToken?: String;
  signupToken?: String;
}>;

export interface AssetCreateInput {
  createdBy: UserCreateOneInput;
  assetUrl: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskCreateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskCreateManyWithoutAssignedToInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface TaskCreateManyWithoutCreatedByInput {
  create?: TaskCreateWithoutCreatedByInput[] | TaskCreateWithoutCreatedByInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
}

export interface TaskCreateWithoutCreatedByInput {
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  category: CategoryCreateOneWithoutTasksInput;
  comments?: CommentCreateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  slug: String;
}

export interface UserCreateOneWithoutTasksAssignedToInput {
  create?: UserCreateWithoutTasksAssignedToInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutTasksAssignedToInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskCreateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface AssetCreateManyInput {
  create?: AssetCreateInput[] | AssetCreateInput;
  connect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
}

export interface CategoryCreateOneWithoutTasksInput {
  create?: CategoryCreateWithoutTasksInput;
  connect?: CategoryWhereUniqueInput;
}

export interface CategoryCreateWithoutTasksInput {
  name: String;
  description?: String;
  categoryFields?: CategoryFieldCreateManyWithoutCategoryInput;
  slug: String;
}

export interface CategoryFieldCreateManyWithoutCategoryInput {
  create?:
    | CategoryFieldCreateWithoutCategoryInput[]
    | CategoryFieldCreateWithoutCategoryInput;
  connect?: CategoryFieldWhereUniqueInput[] | CategoryFieldWhereUniqueInput;
}

export interface CategoryFieldCreateWithoutCategoryInput {
  fieldName: String;
  fieldType: FieldType;
}

export interface CommentCreateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentCreateInput {
  comment: String;
  user?: UserCreateOneInput;
  assets?: AssetCreateManyInput;
}

export interface CustomFieldCreateManyInput {
  create?: CustomFieldCreateInput[] | CustomFieldCreateInput;
  connect?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
}

export interface CustomFieldCreateInput {
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
  categoryField: CategoryFieldCreateOneInput;
}

export interface CategoryFieldCreateOneInput {
  create?: CategoryFieldCreateInput;
  connect?: CategoryFieldWhereUniqueInput;
}

export interface CategoryFieldCreateInput {
  fieldName: String;
  fieldType: FieldType;
  category?: CategoryCreateOneWithoutCategoryFieldsInput;
}

export interface CategoryCreateOneWithoutCategoryFieldsInput {
  create?: CategoryCreateWithoutCategoryFieldsInput;
  connect?: CategoryWhereUniqueInput;
}

export interface CategoryCreateWithoutCategoryFieldsInput {
  name: String;
  description?: String;
  tasks?: TaskCreateManyWithoutCategoryInput;
  slug: String;
}

export interface TaskCreateManyWithoutCategoryInput {
  create?: TaskCreateWithoutCategoryInput[] | TaskCreateWithoutCategoryInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
}

export interface TaskCreateWithoutCategoryInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  comments?: CommentCreateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  slug: String;
}

export interface UserCreateOneWithoutTasksCreatedInput {
  create?: UserCreateWithoutTasksCreatedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutTasksCreatedInput {
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksAssignedTo?: TaskCreateManyWithoutAssignedToInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface TaskCreateManyWithoutAssignedToInput {
  create?:
    | TaskCreateWithoutAssignedToInput[]
    | TaskCreateWithoutAssignedToInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
}

export interface TaskCreateWithoutAssignedToInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  category: CategoryCreateOneWithoutTasksInput;
  comments?: CommentCreateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  slug: String;
}

export interface AssetUpdateInput {
  createdBy?: UserUpdateOneRequiredInput;
  assetUrl?: String;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface TaskUpdateManyWithoutCreatedByInput {
  create?: TaskCreateWithoutCreatedByInput[] | TaskCreateWithoutCreatedByInput;
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  update?:
    | TaskUpdateWithWhereUniqueWithoutCreatedByInput[]
    | TaskUpdateWithWhereUniqueWithoutCreatedByInput;
  upsert?:
    | TaskUpsertWithWhereUniqueWithoutCreatedByInput[]
    | TaskUpsertWithWhereUniqueWithoutCreatedByInput;
}

export interface TaskUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutCreatedByDataInput;
}

export interface TaskUpdateWithoutCreatedByDataInput {
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  category?: CategoryUpdateOneRequiredWithoutTasksInput;
  comments?: CommentUpdateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  slug?: String;
}

export interface UserUpdateOneWithoutTasksAssignedToInput {
  create?: UserCreateWithoutTasksAssignedToInput;
  update?: UserUpdateWithoutTasksAssignedToDataInput;
  upsert?: UserUpsertWithoutTasksAssignedToInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutTasksAssignedToDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface UserUpsertWithoutTasksAssignedToInput {
  update: UserUpdateWithoutTasksAssignedToDataInput;
  create: UserCreateWithoutTasksAssignedToInput;
}

export interface AssetUpdateManyInput {
  create?: AssetCreateInput[] | AssetCreateInput;
  update?:
    | AssetUpdateWithWhereUniqueNestedInput[]
    | AssetUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AssetUpsertWithWhereUniqueNestedInput[]
    | AssetUpsertWithWhereUniqueNestedInput;
  delete?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  connect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
  disconnect?: AssetWhereUniqueInput[] | AssetWhereUniqueInput;
}

export interface AssetUpdateWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  data: AssetUpdateDataInput;
}

export interface AssetUpdateDataInput {
  createdBy?: UserUpdateOneRequiredInput;
  assetUrl?: String;
}

export interface AssetUpsertWithWhereUniqueNestedInput {
  where: AssetWhereUniqueInput;
  update: AssetUpdateDataInput;
  create: AssetCreateInput;
}

export interface CategoryUpdateOneRequiredWithoutTasksInput {
  create?: CategoryCreateWithoutTasksInput;
  update?: CategoryUpdateWithoutTasksDataInput;
  upsert?: CategoryUpsertWithoutTasksInput;
  connect?: CategoryWhereUniqueInput;
}

export interface CategoryUpdateWithoutTasksDataInput {
  name?: String;
  description?: String;
  categoryFields?: CategoryFieldUpdateManyWithoutCategoryInput;
  slug?: String;
}

export interface CategoryFieldUpdateManyWithoutCategoryInput {
  create?:
    | CategoryFieldCreateWithoutCategoryInput[]
    | CategoryFieldCreateWithoutCategoryInput;
  delete?: CategoryFieldWhereUniqueInput[] | CategoryFieldWhereUniqueInput;
  connect?: CategoryFieldWhereUniqueInput[] | CategoryFieldWhereUniqueInput;
  disconnect?: CategoryFieldWhereUniqueInput[] | CategoryFieldWhereUniqueInput;
  update?:
    | CategoryFieldUpdateWithWhereUniqueWithoutCategoryInput[]
    | CategoryFieldUpdateWithWhereUniqueWithoutCategoryInput;
  upsert?:
    | CategoryFieldUpsertWithWhereUniqueWithoutCategoryInput[]
    | CategoryFieldUpsertWithWhereUniqueWithoutCategoryInput;
}

export interface CategoryFieldUpdateWithWhereUniqueWithoutCategoryInput {
  where: CategoryFieldWhereUniqueInput;
  data: CategoryFieldUpdateWithoutCategoryDataInput;
}

export interface CategoryFieldUpdateWithoutCategoryDataInput {
  fieldName?: String;
  fieldType?: FieldType;
}

export interface CategoryFieldUpsertWithWhereUniqueWithoutCategoryInput {
  where: CategoryFieldWhereUniqueInput;
  update: CategoryFieldUpdateWithoutCategoryDataInput;
  create: CategoryFieldCreateWithoutCategoryInput;
}

export interface CategoryUpsertWithoutTasksInput {
  update: CategoryUpdateWithoutTasksDataInput;
  create: CategoryCreateWithoutTasksInput;
}

export interface CommentUpdateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  update?:
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface CommentUpdateDataInput {
  comment?: String;
  user?: UserUpdateOneInput;
  assets?: AssetUpdateManyInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface CustomFieldUpdateManyInput {
  create?: CustomFieldCreateInput[] | CustomFieldCreateInput;
  update?:
    | CustomFieldUpdateWithWhereUniqueNestedInput[]
    | CustomFieldUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CustomFieldUpsertWithWhereUniqueNestedInput[]
    | CustomFieldUpsertWithWhereUniqueNestedInput;
  delete?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
  connect?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
  disconnect?: CustomFieldWhereUniqueInput[] | CustomFieldWhereUniqueInput;
}

export interface CustomFieldUpdateWithWhereUniqueNestedInput {
  where: CustomFieldWhereUniqueInput;
  data: CustomFieldUpdateDataInput;
}

export interface CustomFieldUpdateDataInput {
  fieldName?: String;
  fieldType?: FieldType;
  fieldValue?: String;
  categoryField?: CategoryFieldUpdateOneRequiredInput;
}

export interface CategoryFieldUpdateOneRequiredInput {
  create?: CategoryFieldCreateInput;
  update?: CategoryFieldUpdateDataInput;
  upsert?: CategoryFieldUpsertNestedInput;
  connect?: CategoryFieldWhereUniqueInput;
}

export interface CategoryFieldUpdateDataInput {
  fieldName?: String;
  fieldType?: FieldType;
  category?: CategoryUpdateOneWithoutCategoryFieldsInput;
}

export interface CategoryUpdateOneWithoutCategoryFieldsInput {
  create?: CategoryCreateWithoutCategoryFieldsInput;
  update?: CategoryUpdateWithoutCategoryFieldsDataInput;
  upsert?: CategoryUpsertWithoutCategoryFieldsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CategoryWhereUniqueInput;
}

export interface CategoryUpdateWithoutCategoryFieldsDataInput {
  name?: String;
  description?: String;
  tasks?: TaskUpdateManyWithoutCategoryInput;
  slug?: String;
}

export interface TaskUpdateManyWithoutCategoryInput {
  create?: TaskCreateWithoutCategoryInput[] | TaskCreateWithoutCategoryInput;
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  update?:
    | TaskUpdateWithWhereUniqueWithoutCategoryInput[]
    | TaskUpdateWithWhereUniqueWithoutCategoryInput;
  upsert?:
    | TaskUpsertWithWhereUniqueWithoutCategoryInput[]
    | TaskUpsertWithWhereUniqueWithoutCategoryInput;
}

export interface TaskUpdateWithWhereUniqueWithoutCategoryInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutCategoryDataInput;
}

export interface TaskUpdateWithoutCategoryDataInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  comments?: CommentUpdateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  slug?: String;
}

export interface UserUpdateOneRequiredWithoutTasksCreatedInput {
  create?: UserCreateWithoutTasksCreatedInput;
  update?: UserUpdateWithoutTasksCreatedDataInput;
  upsert?: UserUpsertWithoutTasksCreatedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutTasksCreatedDataInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface TaskUpdateManyWithoutAssignedToInput {
  create?:
    | TaskCreateWithoutAssignedToInput[]
    | TaskCreateWithoutAssignedToInput;
  delete?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  connect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  disconnect?: TaskWhereUniqueInput[] | TaskWhereUniqueInput;
  update?:
    | TaskUpdateWithWhereUniqueWithoutAssignedToInput[]
    | TaskUpdateWithWhereUniqueWithoutAssignedToInput;
  upsert?:
    | TaskUpsertWithWhereUniqueWithoutAssignedToInput[]
    | TaskUpsertWithWhereUniqueWithoutAssignedToInput;
}

export interface TaskUpdateWithWhereUniqueWithoutAssignedToInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutAssignedToDataInput;
}

export interface TaskUpdateWithoutAssignedToDataInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  category?: CategoryUpdateOneRequiredWithoutTasksInput;
  comments?: CommentUpdateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  slug?: String;
}

export interface TaskUpsertWithWhereUniqueWithoutAssignedToInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutAssignedToDataInput;
  create: TaskCreateWithoutAssignedToInput;
}

export interface UserUpsertWithoutTasksCreatedInput {
  update: UserUpdateWithoutTasksCreatedDataInput;
  create: UserCreateWithoutTasksCreatedInput;
}

export interface TaskUpsertWithWhereUniqueWithoutCategoryInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutCategoryDataInput;
  create: TaskCreateWithoutCategoryInput;
}

export interface CategoryUpsertWithoutCategoryFieldsInput {
  update: CategoryUpdateWithoutCategoryFieldsDataInput;
  create: CategoryCreateWithoutCategoryFieldsInput;
}

export interface CategoryFieldUpsertNestedInput {
  update: CategoryFieldUpdateDataInput;
  create: CategoryFieldCreateInput;
}

export interface CustomFieldUpsertWithWhereUniqueNestedInput {
  where: CustomFieldWhereUniqueInput;
  update: CustomFieldUpdateDataInput;
  create: CustomFieldCreateInput;
}

export interface TaskUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutCreatedByDataInput;
  create: TaskCreateWithoutCreatedByInput;
}

export interface CategoryCreateInput {
  name: String;
  description?: String;
  categoryFields?: CategoryFieldCreateManyWithoutCategoryInput;
  tasks?: TaskCreateManyWithoutCategoryInput;
  slug: String;
}

export interface CategoryUpdateInput {
  name?: String;
  description?: String;
  categoryFields?: CategoryFieldUpdateManyWithoutCategoryInput;
  tasks?: TaskUpdateManyWithoutCategoryInput;
  slug?: String;
}

export interface CategoryFieldUpdateInput {
  fieldName?: String;
  fieldType?: FieldType;
  category?: CategoryUpdateOneWithoutCategoryFieldsInput;
}

export interface CommentUpdateInput {
  comment?: String;
  user?: UserUpdateOneInput;
  assets?: AssetUpdateManyInput;
}

export interface CustomFieldUpdateInput {
  fieldName?: String;
  fieldType?: FieldType;
  fieldValue?: String;
  categoryField?: CategoryFieldUpdateOneRequiredInput;
}

export interface TaskCreateInput {
  createdBy: UserCreateOneWithoutTasksCreatedInput;
  assignedTo?: UserCreateOneWithoutTasksAssignedToInput;
  title: String;
  description: String;
  assets?: AssetCreateManyInput;
  category: CategoryCreateOneWithoutTasksInput;
  comments?: CommentCreateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldCreateManyInput;
  status?: TaskStatus;
  slug: String;
}

export interface TaskUpdateInput {
  createdBy?: UserUpdateOneRequiredWithoutTasksCreatedInput;
  assignedTo?: UserUpdateOneWithoutTasksAssignedToInput;
  title?: String;
  description?: String;
  assets?: AssetUpdateManyInput;
  category?: CategoryUpdateOneRequiredWithoutTasksInput;
  comments?: CommentUpdateManyInput;
  dueDate?: DateTimeInput;
  dueWhenPossible?: Boolean;
  customFields?: CustomFieldUpdateManyInput;
  status?: TaskStatus;
  slug?: String;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  tasksCreated?: TaskUpdateManyWithoutCreatedByInput;
  tasksAssignedTo?: TaskUpdateManyWithoutAssignedToInput;
  role?: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status?: UserStatus;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AssetWhereInput;
  AND?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
  OR?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
  NOT?: AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryWhereInput;
  AND?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  OR?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
  NOT?: CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput;
}

export interface CategoryFieldSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CategoryFieldWhereInput;
  AND?:
    | CategoryFieldSubscriptionWhereInput[]
    | CategoryFieldSubscriptionWhereInput;
  OR?:
    | CategoryFieldSubscriptionWhereInput[]
    | CategoryFieldSubscriptionWhereInput;
  NOT?:
    | CategoryFieldSubscriptionWhereInput[]
    | CategoryFieldSubscriptionWhereInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface CustomFieldSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CustomFieldWhereInput;
  AND?: CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput;
  OR?: CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput;
  NOT?: CustomFieldSubscriptionWhereInput[] | CustomFieldSubscriptionWhereInput;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TaskWhereInput;
  AND?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput;
  OR?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput;
  NOT?: TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AssetNode {
  id: ID_Output;
  assetUrl: String;
  createdAt: DateTimeOutput;
}

export interface Asset extends Promise<AssetNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = User>() => T;
  assetUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<AssetNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: <T = UserSubscription>() => T;
  assetUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status: UserStatus;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slackHandle: () => Promise<String>;
  tasksCreated: <T = FragmentableArray<TaskNode>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasksAssignedTo: <T = FragmentableArray<TaskNode>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  signupToken: () => Promise<String>;
  signupTokenExpiry: () => Promise<Float>;
  status: () => Promise<UserStatus>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slackHandle: () => Promise<AsyncIterator<String>>;
  tasksCreated: <T = Promise<AsyncIterator<TaskSubscription>>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasksAssignedTo: <T = Promise<AsyncIterator<TaskSubscription>>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  signupToken: () => Promise<AsyncIterator<String>>;
  signupTokenExpiry: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
}

export interface TaskNode {
  id: ID_Output;
  title: String;
  description: String;
  dueDate?: DateTimeOutput;
  dueWhenPossible: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: TaskStatus;
  slug: String;
}

export interface Task extends Promise<TaskNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdBy: <T = User>() => T;
  assignedTo: <T = User>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  assets: <T = FragmentableArray<AssetNode>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  category: <T = Category>() => T;
  comments: <T = FragmentableArray<CommentNode>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dueDate: () => Promise<DateTimeOutput>;
  dueWhenPossible: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  customFields: <T = FragmentableArray<CustomFieldNode>>(
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<TaskStatus>;
  slug: () => Promise<String>;
}

export interface TaskSubscription
  extends Promise<AsyncIterator<TaskNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdBy: <T = UserSubscription>() => T;
  assignedTo: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  category: <T = CategorySubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  dueWhenPossible: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  customFields: <T = Promise<AsyncIterator<CustomFieldSubscription>>>(
    args?: {
      where?: CustomFieldWhereInput;
      orderBy?: CustomFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  status: () => Promise<AsyncIterator<TaskStatus>>;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface CategoryNode {
  id: ID_Output;
  name: String;
  description?: String;
  slug: String;
}

export interface Category extends Promise<CategoryNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  categoryFields: <T = FragmentableArray<CategoryFieldNode>>(
    args?: {
      where?: CategoryFieldWhereInput;
      orderBy?: CategoryFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasks: <T = FragmentableArray<TaskNode>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  slug: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<CategoryNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  categoryFields: <T = Promise<AsyncIterator<CategoryFieldSubscription>>>(
    args?: {
      where?: CategoryFieldWhereInput;
      orderBy?: CategoryFieldOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(
    args?: {
      where?: TaskWhereInput;
      orderBy?: TaskOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface CategoryFieldNode {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
}

export interface CategoryField
  extends Promise<CategoryFieldNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  category: <T = Category>() => T;
}

export interface CategoryFieldSubscription
  extends Promise<AsyncIterator<CategoryFieldNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  category: <T = CategorySubscription>() => T;
}

export interface CommentNode {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Comment extends Promise<CommentNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  user: <T = User>() => T;
  assets: <T = FragmentableArray<AssetNode>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<CommentNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  assets: <T = Promise<AsyncIterator<AssetSubscription>>>(
    args?: {
      where?: AssetWhereInput;
      orderBy?: AssetOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomFieldNode {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
}

export interface CustomField extends Promise<CustomFieldNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  fieldValue: () => Promise<String>;
  categoryField: <T = CategoryField>() => T;
}

export interface CustomFieldSubscription
  extends Promise<AsyncIterator<CustomFieldNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  fieldValue: () => Promise<AsyncIterator<String>>;
  categoryField: <T = CategoryFieldSubscription>() => T;
}

export interface AssetConnectionNode {}

export interface AssetConnection
  extends Promise<AssetConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<AssetEdgeNode>>() => T;
  aggregate: <T = AggregateAsset>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetEdgeNode {
  cursor: String;
}

export interface AssetEdge extends Promise<AssetEdgeNode>, Fragmentable {
  node: <T = Asset>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdgeNode>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAssetNode {
  count: Int;
}

export interface AggregateAsset
  extends Promise<AggregateAssetNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAssetNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryConnectionNode {}

export interface CategoryConnection
  extends Promise<CategoryConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CategoryEdgeNode>>() => T;
  aggregate: <T = AggregateCategory>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CategoryEdgeNode {
  cursor: String;
}

export interface CategoryEdge extends Promise<CategoryEdgeNode>, Fragmentable {
  node: <T = Category>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdgeNode>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategoryNode {
  count: Int;
}

export interface AggregateCategory
  extends Promise<AggregateCategoryNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategoryNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryFieldConnectionNode {}

export interface CategoryFieldConnection
  extends Promise<CategoryFieldConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CategoryFieldEdgeNode>>() => T;
  aggregate: <T = AggregateCategoryField>() => T;
}

export interface CategoryFieldConnectionSubscription
  extends Promise<AsyncIterator<CategoryFieldConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategoryFieldSubscription>() => T;
}

export interface CategoryFieldEdgeNode {
  cursor: String;
}

export interface CategoryFieldEdge
  extends Promise<CategoryFieldEdgeNode>,
    Fragmentable {
  node: <T = CategoryField>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryFieldEdgeSubscription
  extends Promise<AsyncIterator<CategoryFieldEdgeNode>>,
    Fragmentable {
  node: <T = CategoryFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategoryFieldNode {
  count: Int;
}

export interface AggregateCategoryField
  extends Promise<AggregateCategoryFieldNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategoryFieldSubscription
  extends Promise<AsyncIterator<AggregateCategoryFieldNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnectionNode {}

export interface CommentConnection
  extends Promise<CommentConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CommentEdgeNode>>() => T;
  aggregate: <T = AggregateComment>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdgeNode {
  cursor: String;
}

export interface CommentEdge extends Promise<CommentEdgeNode>, Fragmentable {
  node: <T = Comment>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdgeNode>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCommentNode {
  count: Int;
}

export interface AggregateComment
  extends Promise<AggregateCommentNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateCommentNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomFieldConnectionNode {}

export interface CustomFieldConnection
  extends Promise<CustomFieldConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<CustomFieldEdgeNode>>() => T;
  aggregate: <T = AggregateCustomField>() => T;
}

export interface CustomFieldConnectionSubscription
  extends Promise<AsyncIterator<CustomFieldConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomFieldEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomFieldSubscription>() => T;
}

export interface CustomFieldEdgeNode {
  cursor: String;
}

export interface CustomFieldEdge
  extends Promise<CustomFieldEdgeNode>,
    Fragmentable {
  node: <T = CustomField>() => T;
  cursor: () => Promise<String>;
}

export interface CustomFieldEdgeSubscription
  extends Promise<AsyncIterator<CustomFieldEdgeNode>>,
    Fragmentable {
  node: <T = CustomFieldSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomFieldNode {
  count: Int;
}

export interface AggregateCustomField
  extends Promise<AggregateCustomFieldNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomFieldSubscription
  extends Promise<AsyncIterator<AggregateCustomFieldNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskConnectionNode {}

export interface TaskConnection
  extends Promise<TaskConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<TaskEdgeNode>>() => T;
  aggregate: <T = AggregateTask>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface TaskEdgeNode {
  cursor: String;
}

export interface TaskEdge extends Promise<TaskEdgeNode>, Fragmentable {
  node: <T = Task>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription
  extends Promise<AsyncIterator<TaskEdgeNode>>,
    Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTaskNode {
  count: Int;
}

export interface AggregateTask
  extends Promise<AggregateTaskNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTaskNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AssetSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AssetSubscriptionPayload
  extends Promise<AssetSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Asset>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValues>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface AssetPreviousValuesNode {
  id: ID_Output;
  assetUrl: String;
  createdAt: DateTimeOutput;
}

export interface AssetPreviousValues
  extends Promise<AssetPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  assetUrl: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  assetUrl: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CategorySubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CategorySubscriptionPayload
  extends Promise<CategorySubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Category>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValues>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValuesNode {
  id: ID_Output;
  name: String;
  description?: String;
  slug: String;
}

export interface CategoryPreviousValues
  extends Promise<CategoryPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  slug: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface CategoryFieldSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CategoryFieldSubscriptionPayload
  extends Promise<CategoryFieldSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryField>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryFieldPreviousValues>() => T;
}

export interface CategoryFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategoryFieldSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategoryFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryFieldPreviousValuesSubscription>() => T;
}

export interface CategoryFieldPreviousValuesNode {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
}

export interface CategoryFieldPreviousValues
  extends Promise<CategoryFieldPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
}

export interface CategoryFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryFieldPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
}

export interface CommentSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CommentSubscriptionPayload
  extends Promise<CommentSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Comment>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValues>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValuesNode {
  id: ID_Output;
  comment: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValues
  extends Promise<CommentPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  comment: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  comment: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CustomFieldSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CustomFieldSubscriptionPayload
  extends Promise<CustomFieldSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomField>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomFieldPreviousValues>() => T;
}

export interface CustomFieldSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomFieldSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomFieldSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomFieldPreviousValuesSubscription>() => T;
}

export interface CustomFieldPreviousValuesNode {
  id: ID_Output;
  fieldName: String;
  fieldType: FieldType;
  fieldValue: String;
}

export interface CustomFieldPreviousValues
  extends Promise<CustomFieldPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fieldName: () => Promise<String>;
  fieldType: () => Promise<FieldType>;
  fieldValue: () => Promise<String>;
}

export interface CustomFieldPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomFieldPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fieldName: () => Promise<AsyncIterator<String>>;
  fieldType: () => Promise<AsyncIterator<FieldType>>;
  fieldValue: () => Promise<AsyncIterator<String>>;
}

export interface TaskSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TaskSubscriptionPayload
  extends Promise<TaskSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Task>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValues>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface TaskPreviousValuesNode {
  id: ID_Output;
  title: String;
  description: String;
  dueDate?: DateTimeOutput;
  dueWhenPossible: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  status: TaskStatus;
  slug: String;
}

export interface TaskPreviousValues
  extends Promise<TaskPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  dueDate: () => Promise<DateTimeOutput>;
  dueWhenPossible: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<TaskStatus>;
  slug: () => Promise<String>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  dueDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  dueWhenPossible: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<TaskStatus>>;
  slug: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  name?: String;
  avatar?: String;
  slackHandle?: String;
  role: Role;
  password?: String;
  resetToken?: String;
  resetTokenExpiry?: Float;
  signupToken?: String;
  signupTokenExpiry?: Float;
  status: UserStatus;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  avatar: () => Promise<String>;
  slackHandle: () => Promise<String>;
  role: () => Promise<Role>;
  password: () => Promise<String>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  signupToken: () => Promise<String>;
  signupTokenExpiry: () => Promise<Float>;
  status: () => Promise<UserStatus>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  slackHandle: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  password: () => Promise<AsyncIterator<String>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  signupToken: () => Promise<AsyncIterator<String>>;
  signupTokenExpiry: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
